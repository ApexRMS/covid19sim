as.character(ymd(lastNoControlDate) + days(infectionPeriod)), "."), sep="\n")
}
if (control == 1) {
paste(jurisdictionsGrowthReference, collapse = ', ')
refCountriesString = paste
description = paste(description,
paste0("Growth rate after last date with deaths is set to the observed distribution of rates from ",
paste(jurisdictionsGrowthReference, collapse = ', '),"."), sep="\n")
description = paste(description,
paste0("Growth rates for other countries downloaded from https://github.com/CSSEGISandData/COVID-19 at ", downloadDate, "."), sep="\n")
}
if (fatality == 1) {
description = paste(description,
"Fatality rate is unadjusted age-weighted value from Verity et al (2020).", sep="\n")
}
if (fatality == 2) {
description = paste(description,
"Fatality rate is 50% higher than the age-weighted value from Verity et al (2020).", sep="\n")
}
description = paste(description, "Additional details on the model parameterization can be found at www.modelthecurve.ca", sep="\n")
description(myScenario) = description
# Deaths --------------------------------------------------------------
filename = paste0(inputFolder, "/deaths-output.csv")
deathData = read.csv(filename, stringsAsFactors=F)
deathData = filter(deathData, jurisdiction == jur) %>%
select(date, jurisdiction, deaths_daily)
endDate = as.character(max(as.Date(deathData$date)) + daysPastDeaths)
if (control == 2){
# No control scenario: only include actual deaths attributable to infections up to end of no control date
deathData = filter(deathData, ymd(date) <= ymd(lastNoControlDate) + days(infectionPeriod))
}
myDatasheet = rename(deathData, Timestep = date, Jurisdiction = jurisdiction, Value = deaths_daily)
datasheetName = paste0(packagePrefix, "ActualDeath")
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Run Control -------------------------------------------------------------------------
datasheetName = paste0(packagePrefix, "RunControl")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet,
MinimumIteration=1,
MaximumIteration=numRealizations,
StartDate=startDate,
EndDate=endDate)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
datasheetName = paste0(packagePrefix, "RuntimeJurisdiction")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet, Jurisdiction = jur)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Population ------------------------------------------------------------------------
datasheetName = "Population"
datasheetName = paste0(packagePrefix, "Population")
myDatasheet = populationData %>%
filter(jurisdiction == jur) %>%
select(jurisdiction, population) %>%
rename(Jurisdiction=jurisdiction, TotalSize=population)
saveDatasheet(myScenario, as.data.frame(myDatasheet), name = datasheetName)
# Fatality --------------------------------------------------------
fileName = paste0(inputFolder, "/fatality-canada-ssim.csv")
datasheetName = paste0(packagePrefix, "FatalityRate")
myDatasheet = read.csv(fileName)
myDatasheet = filter(myDatasheet, Jurisdiction == jur)
if (fatality == 2) {
# Fatality scenario 2 has a high fatality multiplier
myDatasheet$Value = myDatasheet$Value * highFatalityMultiplier
}
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Attack Rate -----------------------------------------------------
fileName = paste0(inputFolder, "/attack-rate-canada-ssim.csv")
datasheetName = paste0(packagePrefix, "AttackRate")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Incubation Period -----------------------------------------------------
fileName = paste0(inputFolder, "/incubation-period-ssim.csv")
datasheetName = paste0(packagePrefix, "IncubationPeriod")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Symptom Period -----------------------------------------------------
fileName = paste0(inputFolder, "/symptom-period-ssim.csv")
datasheetName = paste0(packagePrefix, "SymptomPeriod")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Model Type -------------------------------------------------------------------------
modelType = "Exponential"
if (control == 2){
# No control scenario: use the logistic model
modelType="Logistic"
}
datasheetName = paste0(packagePrefix, "ModelType")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet, ModelType=modelType)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Growth -------------------------------------------------------------
datasheetName = paste0(packagePrefix, "GrowthRate")
if (control == 2){
# No control scenario: growth rate using regression model
myDatasheet = datasheet(myScenario, name = datasheetName, optional = F, empty = T)
fileName = paste0(inputFolder, "/deaths-regression-output.csv")
growthData = read.csv(fileName)
growthData = filter(growthData, jurisdiction == jur, regression == "reg1")
growthRate = growthData$slope[1]-1
myDatasheet = addRow(myDatasheet, list(growthRate))
} else {
# Current measures scenario: growth rate sampled from other countries
myDatasheet = datasheet(myScenario, name = datasheetName, optional = T)
fileName = paste0(inputFolder, "/growth-canada-output.csv")
growthData = read.csv(fileName)
growthData$date = as.character(growthData$date)
growthData = filter(growthData, jurisdiction == jur)
for (iter in seq(1,numRealizations)) {
# Sample from growth rates from other countries for each realization
# iter = 1
len = length(jurisdictionsGrowthReference)
index = sample(1:len,1)
refJur = jurisdictionsGrowthReference[index]
growthDataFiltered = filter(growthData, scenario == refJur)
tempData = data.frame(Iteration=iter, Timestep = growthDataFiltered$date, Jurisdiction=as.character(jur), Value=growthDataFiltered$rate)
myDatasheet = rbind(myDatasheet, tempData)
}
}
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
print(name(myScenario))
# Run scenario
# run(myScenario)
# readOnly(myScenario) = T
} # next fatality
} # next control
} # next jur
#
# covid19-ssim-template.R: Preparing a template SyncroSim library for use with the "epidemic" package
#
# Developed by ApexRMS
# ******************* SET THIS DATE BEFORE RUNNING **************
downloadDate = "2020-04-18"
# downloadDate = now()
# ***************************************************************
# Setup -------------------------
library(rsyncrosim)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set the working directory to the script's folder (works only in RStudio)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("covid19-local.R")
source("covid19-constants.R")
# TODO: automatically pull from git data repos
# Optionally run the analysis first to regenerate input data with new deaths
# source("covid19-analysis.R")
# Set constants
packageName = "epidemic"
libraryName = "covid19-canada.ssim"
owner = "ApexRMS"
# Modelling dates
startDate = "2020-02-12"           # First date of simulation -
lastNoControlDate = "2020-03-14"   # Last date for which there are no controls in the No Control scenario
daysPastDeaths = 14                # Number oif days to simulate forward after the last day with deaths
# Number of realizations
numRealizations = 1000
# Fatality scenarios to be included in the template library
# fatalityScenarios = c(2)
fatalityScenarios = c(1,2)
fatalityScenarioNames = c(" (base fatality)", " (high fatality)")
highFatalityMultiplier = 1.5
# Control scenarios to be included in the template library
#controlScenarios = c(2)
controlScenarios = c(1,2)
controlScenarioNames = c("Current measures: ", "No control: ")
# Load Data -------------------------
# Load and summarize the population data
filename = paste0(inputFolder, "/deaths-output.csv")
populationData = read.csv(filename, stringsAsFactors = F) %>%
filter(jurisdiction %in% jurisdictionsModel) %>%
select(jurisdiction, country_region, province_state, population) %>%
group_by(jurisdiction, country_region, province_state) %>%
summarize(population = mean(population)) %>%
ungroup %>%
mutate(name = province_state)
# populationData$name[populationData$name%in% c("")] = populationData$country_region[populationData$name%in% c("")]
populationData$name = populationData$jurisdiction
# Generate dataframe of all the jurisdictions & names
jurisdictions = populationData %>%
select(jurisdiction, name) %>%
mutate(folderId=0)
# Library & Project Datafeeds ------------------------------------
# Start a SyncroSim session
packagePrefix = paste0(packageName, "_")  # Used to reference internal table names in SyncroSim
mySession = session()
# Create a new library for the SyncroSim epidemic package
fileName = paste0(templateFolder, "/", libraryName)
myLibrary = ssimLibrary(fileName, session = mySession, package = packageName, overwrite = T)
# Set the library properties
name(myLibrary) = paste0("COVID-19 Canada (", date(downloadDate), ")")
owner(myLibrary) = owner
description(myLibrary) = paste0("COVID-19 simulation scenarios generated at ", downloadDate,
". \n \nAdditional details on the approach used can be found at www.modelthecurve.ca")
# Turn library multiprocessing on
datasheetName = "core_Multiprocessing"
myDatasheet = datasheet(myLibrary, name = datasheetName)
myDatasheet$EnableMultiprocessing = TRUE
myDatasheet$MaximumJobs=5
saveDatasheet(myLibrary, myDatasheet, name = datasheetName)
# Load the default project for this library
myProject = project(myLibrary, "Definitions")
# Set the project properties
owner(myProject) = owner
description(myProject) = "Currently includes only those provinces with at least 5 deaths for a period of 7 days or more"
# Add Jurisdictions
myJurisdictions = jurisdictions %>%
rename(Name = jurisdiction) %>%
select(Name)
datasheetName = paste0(packagePrefix, "Jurisdiction")
saveDatasheet(myProject, as.data.frame(myJurisdictions), name = datasheetName)
# Add pre-configured Charts
filename = paste0(inputFolder, "/chart-ssim.csv")
myCharts = read.csv(filename)
datasheetName = "corestime_Charts"
saveDatasheet(myProject, myCharts, "corestime_Charts")
#TODO: make the Chart read-only
# Create a folder in the library for the Extra scenarios (using SyncroSim console command)
args = list(create=NULL, folder=NULL, lib=filepath(myLibrary), name="Other Scenarios", tpid=projectId(myProject))
return = command(args, session=mySession)
otherFolderId = as.numeric(strsplit(return, ": ")[[1]][2])
# Create a folder in the library for each jurisdiction (using SyncroSim console command)
for (jurName in jurisdictions$jurisdiction){
args = list(create=NULL, folder=NULL, lib=filepath(myLibrary), name=jurName, tfid=otherFolderId)
return = command(args, session=mySession)
folderId = as.numeric(strsplit(return, ": ")[[1]][2])
jurisdictions$folderId[jurisdictions$name==jurName]=folderId
}
# Scenario Datafeeds ------------------------------
# Create a scenario for each jurisdiction, control scenario and fatality level
for (jur in jurisdictions$jurisdiction){
for (control in controlScenarios) {
for (fatality in fatalityScenarios) {
# Create the first scenario
# jur = jurisdictions$jurisdiction[1]; control = controlScenarios[2]; fatality = fatalityScenarios[1]
jurName = jurisdictions$name[jurisdictions$jurisdiction==jur]
# Create a new scenario and set properties
scenarioName = paste0(controlScenarioNames[control],jurName,fatalityScenarioNames[fatality])
myScenario = scenario(myProject, scenario = scenarioName)
owner(myScenario) = owner
# Put the scenario in the jurisdiction's library folder
folderId = jurisdictions$folderId[jurisdictions$jurisdiction==jur]
if (!((control==1) & (fatality==1))) {
args = list(move=NULL, scenario=NULL, lib=filepath(myLibrary), sid=scenarioId(myScenario), tfid=folderId)
command(args, session=mySession)
}
# Generate a scenario description
description = paste0("Death data downloaded from https://github.com/ishaberry/Covid19Canada at ", downloadDate, ".")
if (control == 2) {
description = paste(description,
paste0("Only death data up to and including ", as.character(ymd(lastNoControlDate) + days(infectionPeriod)), " are included. ",
"This reflects the last date on which death data is associated with the period prior to public health measures."), sep="\n")
description = paste(description,
paste0("Growth rate of infections after last date with deaths is set to the average growth rate of deaths up to and including deaths on ",
as.character(ymd(lastNoControlDate) + days(infectionPeriod)), "."), sep="\n")
}
if (control == 1) {
paste(jurisdictionsGrowthReference, collapse = ', ')
refCountriesString = paste
description = paste(description,
paste0("Growth rate after last date with deaths is set to the observed distribution of rates from ",
paste(jurisdictionsGrowthReference, collapse = ', '),"."), sep="\n")
description = paste(description,
paste0("Growth rates for other countries downloaded from https://github.com/CSSEGISandData/COVID-19 at ", downloadDate, "."), sep="\n")
}
if (fatality == 1) {
description = paste(description,
"Fatality rate is unadjusted age-weighted value from Verity et al (2020).", sep="\n")
}
if (fatality == 2) {
description = paste(description,
"Fatality rate is 50% higher than the age-weighted value from Verity et al (2020).", sep="\n")
}
description = paste(description, "Additional details on the model parameterization can be found at www.modelthecurve.ca", sep="\n")
description(myScenario) = description
# Deaths --------------------------------------------------------------
filename = paste0(inputFolder, "/deaths-output.csv")
deathData = read.csv(filename, stringsAsFactors=F)
deathData = filter(deathData, jurisdiction == jur) %>%
select(date, jurisdiction, deaths_daily)
endDate = as.character(max(as.Date(deathData$date)) + daysPastDeaths)
if (control == 2){
# No control scenario: only include actual deaths attributable to infections up to end of no control date
deathData = filter(deathData, ymd(date) <= ymd(lastNoControlDate) + days(infectionPeriod))
}
myDatasheet = rename(deathData, Timestep = date, Jurisdiction = jurisdiction, Value = deaths_daily)
datasheetName = paste0(packagePrefix, "ActualDeath")
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Run Control -------------------------------------------------------------------------
datasheetName = paste0(packagePrefix, "RunControl")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet,
MinimumIteration=1,
MaximumIteration=numRealizations,
StartDate=startDate,
EndDate=endDate)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
datasheetName = paste0(packagePrefix, "RuntimeJurisdiction")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet, Jurisdiction = jur)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Population ------------------------------------------------------------------------
datasheetName = "Population"
datasheetName = paste0(packagePrefix, "Population")
myDatasheet = populationData %>%
filter(jurisdiction == jur) %>%
select(jurisdiction, population) %>%
rename(Jurisdiction=jurisdiction, TotalSize=population)
saveDatasheet(myScenario, as.data.frame(myDatasheet), name = datasheetName)
# Fatality --------------------------------------------------------
fileName = paste0(inputFolder, "/fatality-canada-ssim.csv")
datasheetName = paste0(packagePrefix, "FatalityRate")
myDatasheet = read.csv(fileName)
myDatasheet = filter(myDatasheet, Jurisdiction == jur)
if (fatality == 2) {
# Fatality scenario 2 has a high fatality multiplier
myDatasheet$Value = myDatasheet$Value * highFatalityMultiplier
}
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Attack Rate -----------------------------------------------------
fileName = paste0(inputFolder, "/attack-rate-canada-ssim.csv")
datasheetName = paste0(packagePrefix, "AttackRate")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Incubation Period -----------------------------------------------------
fileName = paste0(inputFolder, "/incubation-period-ssim.csv")
datasheetName = paste0(packagePrefix, "IncubationPeriod")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Symptom Period -----------------------------------------------------
fileName = paste0(inputFolder, "/symptom-period-ssim.csv")
datasheetName = paste0(packagePrefix, "SymptomPeriod")
myDatasheet = read.csv(fileName)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Model Type -------------------------------------------------------------------------
modelType = "Exponential"
if (control == 2){
# No control scenario: use the logistic model
modelType="Logistic"
}
datasheetName = paste0(packagePrefix, "ModelType")
myDatasheet = datasheet(myScenario, name = datasheetName)
myDatasheet = add_row(myDatasheet, ModelType=modelType)
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
# Growth -------------------------------------------------------------
datasheetName = paste0(packagePrefix, "GrowthRate")
if (control == 2){
# No control scenario: growth rate using regression model
myDatasheet = datasheet(myScenario, name = datasheetName, optional = F, empty = T)
fileName = paste0(inputFolder, "/deaths-regression-output.csv")
growthData = read.csv(fileName)
growthData = filter(growthData, jurisdiction == jur, regression == "reg1")
growthRate = growthData$slope[1]-1
myDatasheet = addRow(myDatasheet, list(growthRate))
} else {
# Current measures scenario: growth rate sampled from other countries
myDatasheet = datasheet(myScenario, name = datasheetName, optional = T)
fileName = paste0(inputFolder, "/growth-canada-output.csv")
growthData = read.csv(fileName)
growthData$date = as.character(growthData$date)
growthData = filter(growthData, jurisdiction == jur)
for (iter in seq(1,numRealizations)) {
# Sample from growth rates from other countries for each realization
# iter = 1
len = length(jurisdictionsGrowthReference)
index = sample(1:len,1)
refJur = jurisdictionsGrowthReference[index]
growthDataFiltered = filter(growthData, scenario == refJur)
tempData = data.frame(Iteration=iter, Timestep = growthDataFiltered$date, Jurisdiction=as.character(jur), Value=growthDataFiltered$rate)
myDatasheet = rbind(myDatasheet, tempData)
}
}
saveDatasheet(myScenario, myDatasheet, name = datasheetName)
print(name(myScenario))
# Run scenario
# run(myScenario)
# readOnly(myScenario) = T
} # next fatality
} # next control
} # next jur
#
# covid19-ssim-run.R: Runs library and sends output to CSV
#
# Takes as input c:\temp\covid19-canada-2020-04-17.sim
# *** Need to set the runDate below to the date of the file above ***
# Runs current measures base scenarios
# Exports the results to csv files in c:\temp\website
#
# Developed by ApexRMS
# ******************* SET THIS DATE BEFORE RUNNING **************
runDate = "2020-04-18"
# ***************************************************************
# Setup -------------------------
library(rsyncrosim)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set the working directory to the script's folder (works only in RStudio)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("covid19-local.R")
source("covid19-constants.R")
# Set constants -------------------------
scenarioNamePrefix = "Current measures: "
scenarioNameSuffix = " (base fatality)"
libraryName = "covid19-canada"
packageName = "epidemic"
numberJobs = 7
# Backup the output files
file.copy(paste0(outputFolder, "/", "deaths-cumulative-model-output.csv"),
paste0(runFolder, "/", "deaths-cumulative-model-output-bak.csv"), overwrite=T)
file.copy(paste0(outputFolder, "/", "deaths-daily-model-output.csv"),
paste0(runFolder, "/", "deaths-daily-model-output-bak.csv"), overwrite=T)
file.copy(paste0(outputFolder, "/", "infected-cumulative-model-output.csv"),
paste0(runFolder, "/", "infected-cumulative-model-output-bak.csv"), overwrite=T)
file.copy(paste0(outputFolder, "/", "infected-daily-model-output.csv"),
paste0(runFolder, "/", "infected-daily-model-output-bak.csv"), overwrite=T)
# Create a copy of the template library to work with in the website folder
sourceFileName = paste0(templateFolder, "/", libraryName, ".ssim")
libraryFileName = paste0(runFolder, "/", libraryName, "-run.ssim")
file.copy(sourceFileName, libraryFileName)
# Start a SyncroSim session
packagePrefix = paste0(packageName, "_")  # Used to reference internal table names in SyncroSim
mySession = session()
# Open copy of library to run for output
myLibrary = ssimLibrary(libraryFileName, session = mySession)
# Generate a list of the scenario names to run
scenarioNames = paste0(scenarioNamePrefix, jurisdictionsModel, scenarioNameSuffix)
# Run scenarios --------------------------------------
# Clear object gathering all the output
if (exists("deaths_cumulative")) { remove(deaths_cumulative)}
if (exists("deaths_daily")) { remove(deaths_daily)}
if (exists("infected_cumulative")) { remove(infected_cumulative)}
if (exists("infected_daily")) { remove(infected_daily)}
# Repeat for all jurisdictions
for (name in scenarioNames) {
# name = scenarioNames[1]
# Run the scenario
myScenario = scenario(myLibrary, name)
# myResultsScenario = scenario(myLibrary, 41)
myResultsScenario = run(myScenario, jobs=numberJobs)
allDatasheetNames = datasheet(myResultsScenario, summary=T)
datasheetName = paste0(packagePrefix, "OutputDeath")
outputDeathRaw = datasheet(myResultsScenario, datasheetName)
datasheetName = paste0(packagePrefix, "OutputInfected")
outputInfectedRaw = datasheet(myResultsScenario, datasheetName)
deaths_daily = outputDeathRaw %>%
mutate(Date = str_sub(Date,1,10)) %>%
group_by(Jurisdiction, Date) %>%
summarize(mean = round(mean(Value),0),
lower = round(quantile(Value, 0.025),0),
upper = round(quantile(Value, 0.975),0)) %>%
mutate(lower = ifelse(mean==lower,"",as.character(lower))) %>%
mutate(upper = ifelse(mean==upper,"",as.character(upper))) %>%
rename(Mean=mean, Upper=upper, Lower=lower) %>%
mutate(date_model_run = date(runDate))
deaths_cumulative = outputDeathRaw %>%
mutate(Date = str_sub(Date,1,10)) %>%
group_by(Jurisdiction, Date) %>%
summarize(mean = round(mean(CumulativeValue),0),
lower = round(quantile(CumulativeValue, 0.025),0),
upper = round(quantile(CumulativeValue, 0.975),0)) %>%
mutate(lower = ifelse(mean==lower,"",as.character(lower))) %>%
mutate(upper = ifelse(mean==upper,"",as.character(upper))) %>%
rename(Mean=mean, Upper=upper, Lower=lower) %>%
mutate(date_model_run = date(runDate))
infected_daily = outputInfectedRaw %>%
mutate(Date = str_sub(Date,1,10)) %>%
group_by(Jurisdiction, Date) %>%
summarize(mean = round(mean(Value),0),
lower = round(quantile(Value, 0.025),0),
upper = round(quantile(Value, 0.975),0)) %>%
rename(Mean=mean, Upper=upper, Lower=lower) %>%
mutate(date_model_run = date(runDate))
infected_cumulative = outputInfectedRaw %>%
mutate(Date = str_sub(Date,1,10)) %>%
group_by(Jurisdiction, Date) %>%
summarize(mean = round(mean(CumulativeValue),0),
lower = round(quantile(CumulativeValue, 0.025),0),
upper = round(quantile(CumulativeValue, 0.975),0)) %>%
rename(Mean=mean, Upper=upper, Lower=lower) %>%
mutate(date_model_run = date(runDate))
# Add output to previously generated output
if (exists("deaths_cumulative_all")) {
deaths_cumulative_all = bind_rows(deaths_cumulative_all, deaths_cumulative)
deaths_daily_all = bind_rows(deaths_daily_all, deaths_daily)
infected_cumulative_all = bind_rows(infected_cumulative_all, infected_cumulative)
infected_daily_all = bind_rows(infected_daily_all, infected_daily)
} else {
deaths_cumulative_all = deaths_cumulative
deaths_daily_all = deaths_daily
infected_cumulative_all = infected_cumulative
infected_daily_all = infected_daily
}
}
# Write output ---------------------------------------------
# Remove country suffix from province jurisdiction name
# deaths_cumulative_all = deaths_cumulative_all %>%
#   ungroup %>%
#   mutate(Jurisdiction = str_replace(Jurisdiction,"Canada - ", ""))
# deaths_daily_all = deaths_daily_all %>%
#   ungroup %>%
#   mutate(Jurisdiction = str_replace(Jurisdiction,"Canada - ", ""))
# infected_cumulative_all = infected_cumulative_all %>%
#   ungroup %>%
#   mutate(Jurisdiction = str_replace(Jurisdiction,"Canada - ", ""))
# infected_daily_all = infected_daily_all %>%
#   ungroup %>%
#   mutate(Jurisdiction = str_replace(Jurisdiction,"Canada - ", ""))
# Write to file
write_csv(deaths_cumulative_all, append=T, paste0(outputFolder, "/", "deaths-cumulative-model-output.csv"))
write_csv(deaths_daily_all, append=T, paste0(outputFolder, "/", "deaths-daily-model-output.csv"))
write_csv(infected_cumulative_all, append=T, paste0(outputFolder, "/", "infected-cumulative-model-output.csv"))
write_csv(infected_daily_all, append=T, paste0(outputFolder, "/", "infected-daily-model-output.csv"))
